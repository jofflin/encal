// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Next Auth Config

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  createdAt            DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String
  accounts            Account[]
  sessions            Session[]
  userPlaceConnections UserPlaceConnection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// EnCal Config

model Place {
  id                  String                @id @default(cuid())
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  basePrice           Int
  kwhPrice            Int
  rooms                Room[]
  placeMeasurements    PlaceMeasurement[]
  userPlaceConnections UserPlaceConnection[]
}

model Room {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  devices    Device[]
}

model Device {
  id                String              @id @default(cuid())
  name              String
  deviceType        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  room              Room                @relation(fields: [roomId], references: [id])
  roomId            String
  deviceMeasurements DeviceMeasurement[]
}

model DeviceMeasurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  String
  value     Float
}

model PlaceMeasurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  value     Float
}

model UserPlaceConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOwner   Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
}
