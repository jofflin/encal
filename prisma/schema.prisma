generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime              @default(now())
  password             String
  updatedAt            DateTime              @updatedAt
  accounts             Account[]
  sessions             Session[]
  userPlaceConnections UserPlaceConnection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id                   String                @id @default(cuid())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  basePrice            Int
  kwhPrice             Int
  placeMeasurements    PlaceMeasurement[]
  rooms                Room[]
  userPlaceConnections UserPlaceConnection[]
}

model Room {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  placeId   String
  devices   Device[]
  place     Place    @relation(fields: [placeId], references: [id])

  @@index([placeId], map: "Room_placeId_fkey")
}

model Device {
  id                 String              @id @default(cuid())
  name               String
  deviceType         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  roomId             String
  serialNumber       String?
  deviceRegistered   Boolean             @default(false)
  secret             String              @unique(map: "secret")
  oneTimeCode        String              @unique(map: "oneTimeCode") @db.VarChar(6)
  room               Room                @relation(fields: [roomId], references: [id])
  deviceMeasurements DeviceMeasurement[]

  @@index([roomId], map: "Device_roomId_fkey")
}

model DeviceMeasurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deviceId  String
  value     Float
  duration  Int      @default(0)
  device    Device   @relation(fields: [deviceId], references: [id])

  @@index([deviceId], map: "DeviceMeasurement_deviceId_fkey")
}

model PlaceMeasurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  placeId   String
  value     Float
  duration  Int      @default(0)
  costs     Float    @default(0) @db.Float
  place     Place    @relation(fields: [placeId], references: [id])

  @@index([placeId], map: "PlaceMeasurement_placeId_fkey")
}

model UserPlaceConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOwner   Boolean
  userId    String
  placeId   String
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [email])

  @@index([placeId], map: "UserPlaceConnection_placeId_fkey")
  @@index([userId], map: "UserPlaceConnection_userId_fkey")
}
